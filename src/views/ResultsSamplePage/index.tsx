import {
  IonBadge,
  IonButton,
  IonButtons,
  IonCard,
  IonCardContent,
  IonCardHeader,
  IonCardSubtitle,
  IonCardTitle,
  IonContent,
  IonItem,
  IonLabel,
  IonList,
  IonLoading,
  IonPage,
  IonToolbar
} from "@ionic/react";
import React, { useState } from "react";
import Layout from "../../components/Layout";
import PageHeader from "../../components/PageHeader";
import Store from "../../store";

// Generated by https://quicktype.io

export interface IAnalyte {
  order_lab_code: string;
  order_lab_name: string;
  result_lab_code: string;
  result_lab_name: string;
  test_group_id: number;
  test_group_name: string;
  lab_abnormal_flag: string;
  client_abnormal_flag: null;
  abnormal_flag: string;
  released: boolean;
  range_type: string;
  reference_ranges: any[];
  released_at: string;
  result_status: string;
  value: string;
  value_unit: string;
  observed_at: string;
  notes: null;
  lab_reference_range: string;
  value_type: string;
}

export default function() {
  const { setResults, attributes, update } = Store.useContainer();
  const [viewed, setViewed] = useState(false);
  const [loading, setLoading] = useState(false);
  return (
    <IonPage>
      <IonLoading isOpen={loading} />
      <PageHeader.WithMenu pageTitle="Results" />
      <IonContent>
        <Layout.Grid>
          <Layout.Block>
            <IonCard color="secondary">
              <IonCardHeader>
                <IonCardTitle>Your results are in</IonCardTitle>
              </IonCardHeader>
              <IonCardContent>
                <p>We've reviewed your results and written up your report</p>
              </IonCardContent>
            </IonCard>
          </Layout.Block>
          <Layout.Block>
            {!attributes.results_viewed && (
              <IonCard color="primary">
                <IonCardHeader>
                  <IonCardTitle>Are you ready to view them?</IonCardTitle>
                </IonCardHeader>
                <IonCardContent></IonCardContent>
                <IonToolbar>
                  <IonButtons slot="end">
                    <IonButton
                      onClick={() => {
                        setResults(
                          attributes.results[0].order.results.analytes
                        );
                        let desiredAttributes = Object.assign(
                          {},
                          { ...attributes },
                          { results_viewed: true }
                        );
                        update(desiredAttributes);
                        // setLoading(true);
                        // setTimeout(() => {
                        //   setLoading(false);
                        // }, 1000);
                        // setTimeout(() => {
                        //   setViewed(true);
                        // }, 800);
                      }}
                    >
                      View
                    </IonButton>
                  </IonButtons>
                </IonToolbar>
              </IonCard>
            )}
          </Layout.Block>
          {attributes.results_viewed === true && <ResultsCard />}
          {attributes.results_viewed === true && (
            <Layout.Block>
              <IonCard color="tertiary">
                <IonCardHeader>
                  <IonCardSubtitle>One-on-One call</IonCardSubtitle>
                  <IonCardTitle>Need to discuss some results?</IonCardTitle>
                </IonCardHeader>
                <IonCardContent>
                  We're hear to talk preconception with you.
                </IonCardContent>
                <IonToolbar color="tertiary">
                  <IonButtons slot="end">
                    <IonButton
                      target="blank"
                      href="https://calendly.com/preconception/educational-call"
                    >
                      Schedule
                    </IonButton>
                  </IonButtons>
                </IonToolbar>
              </IonCard>
            </Layout.Block>
          )}
        </Layout.Grid>
      </IonContent>
    </IonPage>
  );
}

function ResultsCard() {
  const { formattedResults } = Store.useContainer();
  return (
    <>
      {formattedResults?.map((result: any, index: number) => (
        <Layout.Block key={index}>
          <IonCard>
            <IonCardHeader>
              <IonCardTitle>
                {labelNamePicker(result.order_lab_code)}
              </IonCardTitle>
            </IonCardHeader>
            <IonCardContent>
              <IonList>
                {result.values.map((value: IAnalyte, index: number) => {
                  return value.result_status === "final" ? (
                    <IonItem
                      routerLink={`/results/${value.result_lab_code}`}
                      key={index}
                    >
                      <IonLabel className="ion-text-wrap">
                        {value.result_lab_name.length > 4
                          ? value.result_lab_name
                              .toLowerCase()
                              .split(" ")
                              .map(
                                s => s.charAt(0).toUpperCase() + s.substring(1)
                              )
                              .join(" ")
                          : value.result_lab_name}
                      </IonLabel>
                      <IonBadge
                        color={
                          abnormalFlagFormatter(value?.abnormal_flag)?.color
                        }
                      >
                        {abnormalFlagFormatter(value?.abnormal_flag)?.label}
                      </IonBadge>
                    </IonItem>
                  ) : null;
                })}
              </IonList>
            </IonCardContent>
          </IonCard>
        </Layout.Block>
      ))}
    </>
  );
}

function formatResultsList(sampleData: any) {
  let uniqueLabCodeList = [
    //@ts-ignore
    ...new Set(sampleData.map(analyte => analyte.order_lab_code))
  ];
  let baseUniqueResultList = uniqueLabCodeList.map(baseUniqueResultCode => {
    return { order_lab_code: baseUniqueResultCode, values: [] };
  });
  let finalResultList = baseUniqueResultList.map(baseUniqueResult => {
    baseUniqueResult.values = sampleData.filter((result: any) => {
      return result.order_lab_code === baseUniqueResult.order_lab_code;
    });
    return baseUniqueResult;
  });
  return finalResultList;
}

export function abnormalFlagFormatter(abnormal_flag: string) {
  if (abnormal_flag === "N") {
    return { label: "Normal", color: "primary" };
  } else if (abnormal_flag === "H") {
    return {
      label: "High",
      color: "tertiary"
    };
  } else if (abnormal_flag === "L") {
    return { label: "Low", color: "tertiary" };
  } else if (abnormal_flag === "LL") {
    return { label: "Alert Low", color: "secondary" };
  } else if (abnormal_flag === "HH") {
    return { label: "Alert High", color: "secondary" };
  } else if (abnormal_flag === "<") {
    return { label: "Critical Low", color: "warning" };
  } else if (abnormal_flag === ">") {
    return { label: "Critical High", color: "warning" };
  } else if (abnormal_flag === "A") {
    return { label: "Abnormal", color: "secondary" };
  }
}

function labelNamePicker(order_lab_code: string) {
  switch (order_lab_code) {
    case "1759":
      return "Complete Blood Count";
    case "91431":
      return "HIV";
    case "498":
      return "Hepatitis B";
    case "802":
      return "Rubella";
    case "4439":
      return "Varicella";
    case "36126":
      return "RPR";
    case "795":
      return "Antibody Screen";
    case "7788":
      return "Blood Type";
    default:
      break;
  }
}
